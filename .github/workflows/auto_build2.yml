name: Notify Main Repository

on:
  repository_dispatch:
    types: [Auto_Build]  # trigger from submodules repositories

  workflow_dispatch:
    inputs:
      repo_name:
        description: 'Sub module name to check out'
        required: true
      branch_name:
        description: 'Branch to check out in the submodule'
        required: true

run-name: ${{ github.event.client_payload.pull_request_name || 'Manually Trigger Auto Build' }}

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  Checkout_Submodule:
    runs-on: Main_Runner  # Required for .bat script
    steps:
      # This step sets the state to "pending" to indicate that the auto-build process is in progress.  
      # Once the build completes, the status will automatically update to "success" or "failure" based on the outcome.
      - name: Set status on submodule PR                          
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.YOUSSEF_RUNNER }}
          script: |
            await github.rest.repos.createCommitStatus({
              owner: 'YoussefHeshamSalah',
              repo: '${{ github.event.client_payload.repo_name }}',
              sha: '${{ github.event.client_payload.sha_num }}',
              state: "pending",
              context: 'auto-build-status',
              target_url: '${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}'
            });

      - name: Checkout repository with submodules
        uses: actions/checkout@v4
        with:
          clean: true
          submodules: recursive
          token: ${{ secrets.YOUSSEF_RUNNER }}
          fetch-depth: 0

      - name: Update submodule to PR branch
        run: |
              $SubmoduleName = ""
              if ("${{ github.event_name }}" -eq "repository_dispatch") {
                $SubmoduleName = "${{ github.event.client_payload.repo_name }}"
              } elseif ("${{ github.event_name }}" -eq "workflow_dispatch") {
                $SubmoduleName = "${{ github.event.inputs.repo_name }}"
              }

              # get submodule path
              $SubmodulePath = git config --file .gitmodules --get-regexp path | Where-Object {$_ -match $SubmoduleName} | ForEach-Object { ($_ -split " ")[1] }

              if (-not $SubmodulePath) {
                  Write-Error "Submodule '$SubmoduleName' not found!"
                  exit 1
              }
              
              Write-Output "Submodule '$SubmoduleName' is located at: $SubmodulePath"

              cd $SubmodulePath
              git fetch origin

              $BranchName = ""
              if ("${{ github.event_name }}" -eq "repository_dispatch") {
                $BranchName = "${{ github.event.client_payload.branch_name }}"
              } elseif ("${{ github.event_name }}" -eq "workflow_dispatch") {
                $BranchName = "${{ github.event.inputs.branch_name }}"
              }

              if ($(git branch --list $BranchName)) {
                git checkout $BranchName
                git pull origin $BranchName
              } else {
                git checkout -b $BranchName origin/$BranchName
              }
            
  Impbrands_Applications:
    needs: [Checkout_Submodule]
    runs-on: Main_Runner  # Required for .bat script
    steps:
    - name: Run Impbrands-Applications
      run: |
        echo %cd%
        cd .\application\sub_modd_test
        .\example1.bat

  Run_Status:
    needs: [Impbrands_Applications]
    if: always() && github.event_name == 'repository_dispatch'
    runs-on: Main_Runner  # Required for .bat script
    steps:
    - name: Set status on submodule PR
      uses: actions/github-script@v6
      with:
        github-token: ${{ secrets.YOUSSEF_RUNNER }}
        script: |
          const outcomes = [
            '${{ needs.Impbrands_Applications.result }}',
          ];
          const state = outcomes.every(outcome => outcome === 'success') ? 'success' : 'failure';
          const description = state === 'success' ? 'All scripts ran successfully' : 'One or more scripts failed';
          await github.rest.repos.createCommitStatus({
            owner: 'YoussefHeshamSalah',
            repo: '${{ github.event.client_payload.repo_name }}',
            sha: '${{ github.event.client_payload.sha_num }}',
            state: state,
            context: 'auto-build-status',
            description: description,
            target_url: '${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}'
          });

